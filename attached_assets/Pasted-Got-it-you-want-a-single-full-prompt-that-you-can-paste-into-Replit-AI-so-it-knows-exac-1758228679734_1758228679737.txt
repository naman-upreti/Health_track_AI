Got it ✅ — you want a **single, full prompt** that you can paste into **Replit AI** so it knows exactly how to help you **update and enhance** the GitHub repo (*personalized-fitness-recommender-system*).

Here’s the ready-to-use **Replit AI Prompt** 👇

---

# 🔹 Full Prompt for Replit AI

```markdown
You are my coding partner. I have a GitHub repo called **personalized-fitness-recommender-system**.  
I want you to help me **update and upgrade this repo into an advanced project called Health Track AI**.  
Follow these exact instructions step by step, and generate code where required:

---

## 🎯 Project Goal
Transform the repo into a **Health Track AI** platform that:
1. Predicts the user’s fitness goal (Weight Loss, Muscle Gain, Endurance, Maintenance).  
2. Recommends workout & diet plans (rule-based + content-based).  
3. Uses **GenAI (OpenAI API or HuggingFace)** to generate personalized advice.  
4. Has a simple **Streamlit dashboard** for input/output.  
5. Provides a clean **FastAPI backend** for predictions and recommendations.  
6. Is **deployable** (Streamlit Cloud for frontend, Render/Heroku for backend).  

---

## 📂 Folder Structure (Re-organize if needed)
```

health-track-ai/
│── data/
│   └── fitness\_data.csv
│── ml/
│   └── fitness\_model.pkl
│   └── train\_model.py
│── api/
│   └── main.py
│   └── recommender.py
│   └── genai.py
│── dashboard/
│   └── app.py
│── requirements.txt
│── README.md

```

---

## 🛠 Features to Implement

### 1. Dataset
- Generate or extend dataset with: Age, Weight, Height, Activity Level, Gender, Fitness Goal.
- Save it as `data/fitness_data.csv`.

### 2. ML Model
- Train a **RandomForestClassifier** (or SVM as alternative).  
- Input: Age, Weight, Height, Activity.  
- Output: Predicted Fitness Goal.  
- Save model using `joblib` → `ml/fitness_model.pkl`.

### 3. Recommender System
- Create `recommender.py` with rule-based + content-based logic:
  - Rule-based mapping (Weight Loss → cardio, etc).  
  - Content-based (match user profile with closest item in workout/diet database).  

### 4. GenAI Advice
- Create `genai.py` that calls OpenAI API.  
- Prompt should take: Age, Weight, Activity Level, Goal.  
- Generate short bullet-point workout + diet advice.  

### 5. FastAPI Backend (`main.py`)
Endpoints:
- `/predict` → returns predicted goal.  
- `/recommend` → returns recommended workout & diet.  
- `/genai` → returns AI-generated advice.  
- `/full_plan` → combines all above into one JSON.  

### 6. Streamlit Dashboard (`dashboard/app.py`)
- Input fields: Age, Weight, Height, Gender, Activity Level.  
- On button click → call backend → display:
  - Predicted Goal.  
  - Rule-based/Content-based Plan.  
  - GenAI Advice.  
- Add simple chart (dummy progress tracking).

### 7. Deployment
- Add `requirements.txt` with all dependencies:
```

pandas
numpy
scikit-learn
matplotlib
seaborn
joblib
fastapi
uvicorn
streamlit
openai
requests

```
- Add instructions in `README.md` for running locally + deploying to Streamlit Cloud & Render.

---

## ✅ Deliverables
- Clean, modular code with comments.  
- Working FastAPI backend + Streamlit frontend.  
- `README.md` updated with:
- Project overview  
- Features  
- Setup instructions  
- Example usage  
- (Optional) Small architecture diagram in ASCII art or markdown.  

---

👉 Now, please start implementing these updates **step by step**.  
For each step:
1. Show me the updated code file.  
2. Explain briefly what changed.  
3. Suggest the next step until the full project is complete.  
```

---

⚡ Tip: Paste this into **Replit AI chat** → it will act as your “senior dev” and guide you through updating the repo file by file.

---

Do you want me to also give you a **set of commit messages** (like a Git history plan) so you can commit cleanly after each step on Replit → GitHub?
